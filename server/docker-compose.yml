version: '3.8'

services:

  # PostgreSQL database for Auth and Core Services
  postgres:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: StudySolution
      POSTGRES_PASSWORD: StudySolution
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5434:5432
    networks:
      - microservices-net
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    container_name: ms_mongo_db
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: StudySolution
      MONGO_INITDB_ROOT_PASSWORD: StudySolution
    networks:
      - microservices-net

  # Mongo Express for Database UI
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: unless-stopped
    depends_on:
      - mongodb
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: StudySolution
      ME_CONFIG_MONGODB_ADMINPASSWORD: StudySolution
      ME_CONFIG_MONGODB_SERVER: mongodb
    networks:
      - microservices-net

  # MailDev for Email Testing
  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - microservices-net

  ai-service:
    build:
      context: ./services/ai-service   # Ensure this path points to your Python microservice directory
      dockerfile: Dockerfile
    ports:
      - "8098:8098"
    environment:
      - EUREKA_SERVER_URL=http://localhost:8761/eureka/
      - APP_NAME=ai-service
      - PORT=8090
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MONGODB_URI=mongodb://StudySolution:StudySolution@mongodb:27017/ai_service?authSource=admin
    depends_on:
      - discovery-service   # Only include if your Eureka server is defined in this Compose file
      - mongodb
    networks:
      - microservices-net  # Use the same network as your other services
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8098/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  mongo:
